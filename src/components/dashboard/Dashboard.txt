'use client';
import React, { useState, useMemo } from 'react';
import { StatCard } from './StatCard';
import { Article, Mouvement, Contact } from '@/types';

// üîß Fonction de correction : soustrait 1 jour √† la date de la Sheet
function correctSheetDate(dateStr: string): string {
  if (!dateStr) return '';

  // Cas 1 : format "DD/MM/YYYY HH:MM:SS" ou "DD/MM/YYYY"
  if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(dateStr)) {
    const [day, month, year] = dateStr.split(' ')[0].split('/');
    const date = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);
    date.setDate(date.getDate() - 1);
    const y = date.getFullYear();
    const m = String(date.getMonth() + 1).padStart(2, '0');
    const d = String(date.getDate()).padStart(2, '0');
    return `${y}-${m}-${d}`;
  }

  // Cas 2 : format ISO (ex. "2025-04-01T00:00:00.000Z")
  if (dateStr.includes('T')) {
    const date = new Date(dateStr);
    date.setDate(date.getDate() - 1);
    const y = date.getFullYear();
    const m = String(date.getMonth() + 1).padStart(2, '0');
    const d = String(date.getDate()).padStart(2, '0');
    return `${y}-${m}-${d}`;
  }

  // Cas 3 : d√©j√† au format YYYY-MM-DD
  if (/^\d{4}-\d{2}-\d{2}/.test(dateStr)) {
    const date = new Date(dateStr);
    date.setDate(date.getDate() - 1);
    const y = date.getFullYear();
    const m = String(date.getMonth() + 1).padStart(2, '0');
    const d = String(date.getDate()).padStart(2, '0');
    return `${y}-${m}-${d}`;
  }

  // Fallback (ne devrait pas arriver)
  return dateStr.substring(0, 10);
}

// üîß Fonction pour affichage DD/MM/YYYY √† partir de la date corrig√©e
function formatDisplayDate(isoDate: string): string {
  if (!isoDate) return '';
  const [y, m, d] = isoDate.split('-');
  return `${d}/${m}/${y}`;
}

interface DashboardProps {
  stats: any;
  mouvements: Mouvement[];
  articles: Article[];
  clients: Contact[];
  fournisseurs: Contact[];
  achats?: any[];
}

export function Dashboard({ stats, mouvements, articles, clients, fournisseurs, achats = [] }: DashboardProps) {
  const currentYear = new Date().getFullYear();
  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [selectedMonth, setSelectedMonth] = useState<string>('all');

  const availableYears = Array.from({ length: 5 }, (_, i) => currentYear - i);
  
  const months = [
    { value: 'all', label: 'Ann√©e compl√®te' },
    { value: '01', label: 'Janvier' },
    { value: '02', label: 'F√©vrier' },
    { value: '03', label: 'Mars' },
    { value: '04', label: 'Avril' },
    { value: '05', label: 'Mai' },
    { value: '06', label: 'Juin' },
    { value: '07', label: 'Juillet' },
    { value: '08', label: 'Ao√ªt' },
    { value: '09', label: 'Septembre' },
    { value: '10', label: 'Octobre' },
    { value: '11', label: 'Novembre' },
    { value: '12', label: 'D√©cembre' },
  ];

  const filteredData = useMemo(() => {
    // ‚úÖ Calcul des bornes de la p√©riode s√©lectionn√©e
    const startDate = selectedMonth === 'all' 
      ? `${selectedYear}-01-01` 
      : `${selectedYear}-${selectedMonth}-01`;
    
    const endDate = selectedMonth === 'all'
      ? `${selectedYear}-12-31`
      : (() => {
          const year = selectedYear;
          const month = parseInt(selectedMonth);
          const lastDay = new Date(year, month, 0).getDate();
          return `${year}-${selectedMonth}-${lastDay.toString().padStart(2, '0')}`;
        })();

    // ‚úÖ Filtrer les ventes avec correction de date
    const ventesFiltered = mouvements.filter(m => {
      if (m.type !== 'vente' && m.type !== 'venteComptoir') return false;
      const correctedDate = correctSheetDate(m.date);
      return correctedDate >= startDate && correctedDate <= endDate;
    });

    // ‚úÖ Filtrer les achats (si date_achat existe)
    const achatsFiltered = achats.filter(a => {
      if (!a.date_achat) return false;
      const correctedDate = correctSheetDate(a.date_achat);
      return correctedDate >= startDate && correctedDate <= endDate;
    });

    // Calculs financiers
    let totalVentes = 0;
    let coutAchatVentes = 0;

    ventesFiltered.forEach(vente => {
      const article = articles.find(a => a.id === vente.articleId);
      if (article) {
        const prixVenteTTC = article.prixVenteTTC || 0;
        const prixAchat = article.prixAchat || 0;
        const quantite = parseFloat(vente.quantite?.toString() || '0') || 0;
        
        totalVentes += prixVenteTTC * quantite;
        coutAchatVentes += prixAchat * quantite;
      }
    });

    const totalAchats = achatsFiltered.reduce((sum, a) => sum + (parseFloat(a.montantTTC) || 0), 0);
    const beneficeBrut = totalVentes - coutAchatVentes;
    const beneficeNet = beneficeBrut - totalAchats;

    return {
      totalVentes,
      totalAchats,
      coutAchatVentes,
      beneficeBrut,
      beneficeNet,
      nombreVentes: ventesFiltered.length,
      nombreAchats: achatsFiltered.length,
      mouvementsFiltered: ventesFiltered,
    };
  }, [selectedYear, selectedMonth, mouvements, achats, articles]);

  const getBeneficeColor = (value: number) => {
    if (value > 0) return 'green';
    if (value < 0) return 'red';
    return 'gray';
  };

  return (
    <div>
      <h2 className="text-3xl font-bold mb-6">Dashboard</h2>

      <div className="bg-white rounded-lg shadow p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Ann√©e</label>
            <select 
              value={selectedYear} 
              onChange={(e) => setSelectedYear(parseInt(e.target.value))}
              className="w-full px-4 py-2 border rounded-lg"
            >
              {availableYears.map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">P√©riode</label>
            <select 
              value={selectedMonth} 
              onChange={(e) => setSelectedMonth(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
            >
              {months.map(month => (
                <option key={month.value} value={month.value}>{month.label}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <StatCard 
          title="Ventes Totales" 
          value={`${filteredData.totalVentes.toFixed(2)} ‚Ç¨`} 
          color="green" 
          subtitle={`${filteredData.nombreVentes} vente(s)`}
        />
        <StatCard 
          title="Achats / Frais" 
          value={`${filteredData.totalAchats.toFixed(2)} ‚Ç¨`} 
          color="red" 
          subtitle={`${filteredData.nombreAchats} achat(s)`}
        />
        <StatCard 
          title="Marge Brute" 
          value={`${filteredData.beneficeBrut.toFixed(2)} ‚Ç¨`} 
          color={getBeneficeColor(filteredData.beneficeBrut)}
          subtitle="Ventes - Co√ªt marchandises"
        />
        <StatCard 
          title="R√©sultat Net" 
          value={`${filteredData.beneficeNet.toFixed(2)} ‚Ç¨`} 
          color={getBeneficeColor(filteredData.beneficeNet)}
          subtitle="Apr√®s d√©duction frais"
        />
      </div>

      <div className={`${
        filteredData.beneficeNet > 0 ? 'bg-green-100 border-green-500' : 
        filteredData.beneficeNet < 0 ? 'bg-red-100 border-red-500' : 
        'bg-gray-100 border-gray-500'
      } border-l-4 rounded-lg p-4 mb-6`}>
        <p className="font-bold text-lg">
          {filteredData.beneficeNet > 0 ? '‚úÖ B√©n√©fice' : 
           filteredData.beneficeNet < 0 ? '‚ö†Ô∏è Perte' : 
           '‚ûñ √âquilibre'}
        </p>
        <p className="text-sm mt-1">
          {filteredData.beneficeNet > 0 
            ? `Vous avez r√©alis√© un b√©n√©fice de ${filteredData.beneficeNet.toFixed(2)} ‚Ç¨ sur cette p√©riode.`
            : filteredData.beneficeNet < 0
            ? `Vous avez une perte de ${Math.abs(filteredData.beneficeNet).toFixed(2)} ‚Ç¨ sur cette p√©riode.`
            : 'Vos revenus et d√©penses sont √©quilibr√©s sur cette p√©riode.'}
        </p>
        <div className="mt-3 text-sm">
          <p>‚Ä¢ Co√ªt des marchandises vendues : {filteredData.coutAchatVentes.toFixed(2)} ‚Ç¨</p>
          <p>‚Ä¢ Marge commerciale : {filteredData.beneficeBrut.toFixed(2)} ‚Ç¨</p>
          <p>‚Ä¢ Frais g√©n√©raux : {filteredData.totalAchats.toFixed(2)} ‚Ç¨</p>
        </div>
      </div>

      {stats.articlesFaibleStock > 0 && (
        <div className="bg-orange-100 border-l-4 border-orange-500 p-4 mb-6">
          <p className="font-bold">‚ö†Ô∏è Alerte Stock</p>
          <p>{stats.articlesFaibleStock} article(s) ont un stock inf√©rieur √† 10 unit√©s</p>
        </div>
      )}

      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-xl font-bold mb-4">
          Derniers Mouvements 
          {selectedMonth !== 'all' && ` - ${months.find(m => m.value === selectedMonth)?.label} ${selectedYear}`}
          {selectedMonth === 'all' && ` - ${selectedYear}`}
        </h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="p-3 text-left">Date</th>
                <th className="p-3 text-left">Type</th>
                <th className="p-3 text-left">Article</th>
                <th className="p-3 text-left">Quantit√©</th>
                <th className="p-3 text-left">Montant</th>
                <th className="p-3 text-left">Contact</th>
              </tr>
            </thead>
            <tbody>
              {filteredData.mouvementsFiltered.slice(-10).reverse().map((mouv) => {
                const article = articles.find(a => a.id === mouv.articleId);
                const contact = mouv.type === 'vente' || mouv.type === 'venteComptoir'
                  ? clients.find(c => c.id === mouv.clientId) 
                  : fournisseurs.find(f => f.id === mouv.fournisseurId);
                
                const quantite = parseFloat(mouv.quantite?.toString() || '0') || 0;
                const montant = article ? (article.prixVenteTTC || 0) * quantite : 0;
                
                // ‚úÖ Affichage avec correction
                const correctedIso = correctSheetDate(mouv.date);
                const dateAffichage = formatDisplayDate(correctedIso);
                
                return (
                  <tr key={mouv.id} className="border-b hover:bg-gray-50">
                    <td className="p-3">{dateAffichage}</td>
                    <td className="p-3">
                      <span className={`px-2 py-1 rounded text-xs ${
                        mouv.type === 'entree' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                      }`}>
                        {mouv.type}
                      </span>
                    </td>
                    <td className="p-3">{article?.nom}</td>
                    <td className="p-3">{quantite % 1 === 0 ? quantite : quantite.toFixed(2)}</td>
                    <td className="p-3 font-semibold">{montant.toFixed(2)} ‚Ç¨</td>
                    <td className="p-3">{contact?.societe || contact?.nom || '-'}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}